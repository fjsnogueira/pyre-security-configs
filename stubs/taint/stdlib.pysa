# Python 3.7
# Sources
def input(prompt = ...) -> TaintSource[UserSpecified]: ...

# Sinks
def pickle.loads(bytes_object: TaintSink[RemoteCodeExecution], *, fix_imports = ..., encoding = ..., errors = ...): ...
def marshal.loads(bytes: TaintSink[RemoteCodeExecution]): ...
def eval(expression: TaintSink[RemoteCodeExecution], globals = ..., locals = ...): ...


# RCE subprocess
def subprocess.run(args: TaintSink[RemoteCodeExecution], bufsize = ..., executable = ..., stdin = ..., stdout = ..., stderr = ..., preexec_fn = ..., close_fds = ..., shell = ..., cwd = ..., env = ..., universal_newlines = ..., startupinfo = ..., creationflags = ..., restore_signals =..., start_new_session = ..., pass_fds = ..., *, capture_output = ..., check = ..., encoding = ..., errors = ..., input = ..., text = ..., timeout = ...): ... 
def subprocess.Popen.__init__(self, args: TaintSink[RemoteCodeExecution], bufsize = ..., executable = ..., stdin = ..., stdout = ..., stderr = ..., preexec_fn = ..., close_fds = ..., shell = ..., cwd = ..., env = ..., universal_newlines = ..., startupinfo = ..., creationflags = ..., restore_signals = ..., start_new_session = ..., pass_fds = ..., *, encoding = ..., errors = ...): ...
def subprocess.call(args: TaintSink[RemoteCodeExecution], bufsize = ..., executable = ..., stdin = ..., stdout = ..., stderr = ..., preexec_fn = ..., close_fds = ..., shell = ..., cwd = ..., env = ..., universal_newlines = ..., startupinfo = ..., creationflags = ..., restore_signals = ..., start_new_session = ..., pass_fds = ..., timeout = ...): ...
def subprocess.check_call(args: TaintSink[RemoteCodeExecution], bufsize = ..., executable = ..., stdin = ..., stdout = ..., stderr = ..., preexec_fn = ..., close_fds = ..., shell = ..., cwd = ..., env = ..., universal_newlines = ..., startupinfo = ..., creationflags = ..., restore_signals = ..., start_new_session = ..., pass_fds = ..., timeout = ...): ...
def subprocess.check_output(args: TaintSink[RemoteCodeExecution], bufsize = ..., executable = ..., stdin = ..., stderr = ..., preexec_fn = ..., close_fds = ..., shell = ..., cwd = ..., env = ..., universal_newlines = ..., startupinfo = ..., creationflags = ..., restore_signals = ..., start_new_session = ..., pass_fds = ..., *, timeout = ..., input = ..., encoding = ..., errors = ..., text = ...): ...
def subprocess.getstatusoutput(cmd: TaintSink[RemoteCodeExecution]): ...
def subprocess.getoutput(cmd: TaintSink[RemoteCodeExecution]): ...


# RCE os
def os.execl(file: TaintSink[RemoteCodeExecution], arg0: TaintSink[RemoteCodeExecution], *args: TaintSink[RemoteCodeExecution]): ...
def os.execlp(file: TaintSink[RemoteCodeExecution], arg0: TaintSink[RemoteCodeExecution], *args: TaintSink[RemoteCodeExecution]): ...
def os.execle(file: TaintSink[RemoteCodeExecution], arg0: TaintSink[RemoteCodeExecution], *args: TaintSink[RemoteCodeExecution]): ...
def os.execlpe(file: TaintSink[RemoteCodeExecution], arg0: TaintSink[RemoteCodeExecution], *args: TaintSink[RemoteCodeExecution]): ...
def os.execv(path: TaintSink[RemoteCodeExecution], args: TaintSink[RemoteCodeExecution]): ...
def os.execve(path: TaintSink[RemoteCodeExecution], args: TaintSink[RemoteCodeExecution], env = ...): ...
def os.execvp(file: TaintSink[RemoteCodeExecution], args: TaintSink[RemoteCodeExecution]): ...
def os.execvpe(file: TaintSink[RemoteCodeExecution], args: TaintSink[RemoteCodeExecution], env = ...): ...
def os.spawnl(mode = ..., path: TaintSink[RemoteCodeExecution], arg0: TaintSink[RemoteCodeExecution], *args: TaintSink[RemoteCodeExecution]): ...
def os.spawnle(mode = ..., path: TaintSink[RemoteCodeExecution], arg0: TaintSink[RemoteCodeExecution], *args: TaintSink[RemoteCodeExecution]): ...
def os.spawnv(mode = ..., path: TaintSink[RemoteCodeExecution], args: TaintSink[RemoteCodeExecution]): ...
def os.spawnve(mode = ..., path: TaintSink[RemoteCodeExecution], args: TaintSink[RemoteCodeExecution], env = ...): ...
def os.spawnlp(mode = ..., file: TaintSink[RemoteCodeExecution], arg0: TaintSink[RemoteCodeExecution], *args: TaintSink[RemoteCodeExecution]): ...
def os.spawnlpe(mode = ..., file: TaintSink[RemoteCodeExecution], arg0: TaintSink[RemoteCodeExecution], *args: TaintSink[RemoteCodeExecution]): ...
def os.spawnvp(mode = ..., file: TaintSink[RemoteCodeExecution], args: TaintSink[RemoteCodeExecution]): ...
def os.spawnvpe(mode = ..., file: TaintSink[RemoteCodeExecution], args: TaintSink[RemoteCodeExecution], env = ...): ...
def os.system(command: TaintSink[RemoteCodeExecution]): ...
def os.popen(command: TaintSink[RemoteCodeExecution], mode = ..., buffering = ...): ...
